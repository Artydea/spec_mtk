//===========================================
test_fun2 函数：写入16字节密钥

>> 8008 0000 14 02 0000 10 11223344556677881122334455667788 //写入16字节密钥
<< 6100// 写入成功

输入：inbuf = {0x14      ,0x02,     0x00,0x00,      0x10,     0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,},
inbuf[0]==0x14 ，表示后面所有数据的长度  ，20个字节
inbuf[1]==0x02，表示执行test_fun2,
inbuf[2]~inbuf[3] ，表示写数据的偏移地址
inbuf[4]== 0x10，表示后面要写入数据的长度，16字节
inbuf[5]~inbuf[20]，表示写入的密钥
执行 test_fun2 后,返回6100，表示执行成功。





//===========================================
test_fun3 函数：读取16字节密钥

>> 8008 0000 04 03  0000 10
<< 6110
>> 00C0 0000 10
<< 11223344556677881122334455667788     9000

输入：inbuf = {0x04      ,0x03 ,     0x00,0x00,      0x10,  }
inbuf[0]==0x04 ，表示后面所有数据的长度  ，4个字节
inbuf[1]==0x03，表示执行test_fun3
inbuf[2]~inbuf[3] ，表示读取数据的偏移地址
inbuf[4]== 0x10，表示要读取数据的长度，16字节

芯片返回6110，表示有0x10长度的字节返回。

输入：00C0 0000 10 //取回这16字节的数据
返回：11223344556677881122334455667788     9000//9000表示执行成功


（注意：实际应用中，可以内部程序使用，不要使用这个读取函数设置外部读取NVM区的命令，否则NVM区存储的数据就会被外界读出。在例子中删除它，这样写入的密钥就无法读出，保护密钥的安全。）

//===========================================
test_fun1 函数：用之前写入的密钥进行3DES加密


>> 8008 0000 0A 01 08 4C4B1201000211E7
<< 6108
>> 00C0 0000 08
<< 8444DC5EC01B9CB3   9000

输入：inbuf = {0x0A      ,0x01,     0x08,    0x4C,0x4B,0x12,0x01,0x00,0x02,0x11,0xE7,  }
inbuf[0]==0x0A ，表示后面所有数据的长度  ，10个字节
inbuf[1]==0x01，表示执行test_fun1
inbuf[2]==0x08，表示后面需要加密数据的长度
inbuf[3]~inbuf[10]，表示要加密的数据

芯片返回6108，表示有0x08长度的字节返回。

输入：00C0 0000 08 //取回这8字节的数据
返回：8444DC5EC01B9CB3     9000  //9000表示执行成功

执行 test_fun1 后, outbuf 的内容为 {0x08,  0x84，0x44，0xDC，0x5E，0xC0，0x1B，0x9C，0xB3};
outbuf[0],表示加密结果的数据长度
outbuf[1]~outbuf[8],表示加密后的结果





//=============================================================================
当使用单片机和加密芯片通讯时，向加密芯片发指令的格式可以用A3协议，只需把8008 0000的命令头改为A3即可，而且不用使用00C0 0000的指令取数据。


以下为基于自定义A3协议演示:

test_fun2 函数：写入16字节密钥

>> A3  14 02 0000 10 11223344556677881122334455667788 //写入16字节密钥
<< A3   00// 写入成功


test_fun3 函数：读取16字节密钥

>> A3 04 03  0000 10
<< A3 10 11223344556677881122334455667788



test_fun1 函数：用之前写入的密钥进行3DES加密

>> A3 0A 01 08 4C4B1201000211E7
<< A3 08  8444DC5EC01B9CB3  


